{"version":3,"sources":["components/HighlightCode/index.less","config/Context.js","util/generator.js","providers/ContextProvider.js","components/SettingArea/index.jsx","components/ConfigTable/index.jsx","components/HighlightCode/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppContext","React","createContext","prettier","require","plugins","ignoreColumnName","formateConfigParam","_data","packageName","_","projectName","tableName","tableSchema","map","Map","set","tableSchemaArray","_tableSchema","preprocessData","patt","RegExp","item","test","o","formatTableSchemaToArray","i","length","obj","columnName","type","get","substring","key","push","AppContextProvider","props","_useState","useState","_useState2","Object","slicedToArray","setTableSchema","_useState3","_useState4","formattedGridColumn","setFormattedGridColumn","react_default","a","createElement","Context","Provider","value","setSettingConfig","updateConfig","_state","result","includes","colName","filterType","sorter","render","concat","format","parser","genGridColumn","children","TextArea","Input","Form","create","hocProps","fieldsError","useContext","_hocProps$form","form","validateFields","getFieldDecorator","getFieldsError","className","es_form","layout","onSubmit","e","preventDefault","err","values","Item","label","rules","required","message","rows","es_button","htmlType","disabled","keys","some","field","Option","Select","ConfigTable","_useContext","handleChange","_type","_index","_value","config","target","checked","objectSpread","columns","title","dataIndex","text","record","index","es_select","defaultValue","style","width","onChange","bind","es_checkbox","table","dataSource","pagination","onClick","HighlightCodeComp","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","codeStr","lang","es","assign","defaultProps","theme","code","language","_ref","tokens","getLineProps","getTokenProps","line","token","Component","HighlightCode","HighlightCode_HighlightCodeComp","App","ghost","icon","href","ContextProvider","src_components_SettingArea","src_components_ConfigTable","src_components_HighlightCode","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68d25534.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.d41d8cd9.less\";","import React from \"react\";\nconst AppContext = React.createContext();\n\n\nexport default AppContext;","import * as _ from \"lodash\";\n\nconst prettier = require(\"prettier/standalone\");\nconst plugins = [require(\"prettier/parser-babylon\")];\n\n//ignore entity colunm\nexport const ignoreColumnName = [\n  \"CREATE_TIME\",\n  \"CREATE_USER\",\n  \"LAST_MODIFIED\",\n  \"LAST_MODIFY_USER\",\n  \"TS\",\n  \"DR\"\n];\n\nexport const genGridColumn = _state => {\n  const { tableSchema } = _state;\n\n  let result = \"\";\n\n  result += `const column = [`;\n\n  tableSchema.map(item => {\n    if (!ignoreColumnName.includes(item.columnName)) {\n      const colName = _.camelCase(item.columnName);\n      const filterType = item.filterType ? item.filterType : \"none\";\n      const sorter = item.sorter ? item.sorter : \"none\";\n      const render = item.render ? item.render : \"none\";\n\n      result += `\n           {\n               title: \"${colName}\",\n               dataIndex: \"${colName}\",\n               key: \"${colName}\",\n               width: 120,\n\n          `;\n\n      // filterType\n      switch (filterType) {\n        case \"none\":\n          break;\n        case \"text\":\n          result += `\n                filterType: \"text\",\n                filterDropdownType: \"string\",\n                filterDropdown: \"show\",\n              `;\n          break;\n        case \"number\":\n          result += `\n                filterType: \"number\", \n                filterDropdownType: \"number\", \n                className: 'column-number-right ', \n                filterInputNumberOptions: {\n                    max: 999999,\n                    min: 0,\n                    step: 1,\n                    precision: 0\n                },\n              `;\n          break;\n        case \"date\":\n          result += `\n                filterType: \"date\",\n                filterDropdown: \"show\", \n              `;\n          break;\n        case \"daterange\":\n          result += `\n                filterDropdown: \"hide\", \n                filterType: \"daterange\", \n                filterDropdownType: \"daterange\", \n              `;\n          break;\n        case \"dropdown\":\n          result += `\n                filterType: \"dropdown\",\n                filterDropdown: \"hide\",  \n                filterDropdownAuto: \"manual\", \n                filterDropdownData: [{key: \"KEY_1\", value: \"VALUE_1\"}, {key: \"KEY_2\", value: \"VALUE_2\"}],\n              `;\n          break;\n\n        default:\n          break;\n      }\n\n      // sorter\n      if (sorter !== \"none\") {\n        result += `\n                sorter: (a, b) => a.${colName} - b.${colName},\n            `;\n      }\n\n      // render\n      switch (render) {\n        case \"none\":\n          break;\n        case \"span\":\n          result += `\n                render: (text, record, index) => {\n                    return <span>{text ? text : \"\"}</span>\n                }\n              `;\n          break;\n        case \"moment\":\n          result += `\n                render: (text, record, index) => {\n                      return <div>{text ? moment(text).format(\"YYYY/MM/DD\") : \"\"}</div>\n                }\n              `;\n          break;\n        case \"toLocaleString\":\n          result += `\n                render: (text, record, index) => {\n                      return  <span>{typeof text === \"number\" ? Number(text.toFixed(2)).toLocaleString() : \"\"}</span>;\n                }\n              `;\n          break;\n        case \"Tooltip\":\n          result += `\n                render: (text, record, index) => {\n                    return (\n                        <Tooltip inverse overlay={text}>\n                            <span>{text}</span>\n                        </Tooltip>\n                    );\n                }\n              `;\n          break;\n\n        default:\n          break;\n      }\n\n      result += `},`;\n    }\n  });\n\n  result += `];`;\n\n  const formattedGridColumn = prettier.format(result, {\n    parser: \"babylon\",\n    plugins\n  });\n\n  return formattedGridColumn;\n};\n\nexport const formatTableSchemaToArray = _tableSchema => {\n  let preprocessData = _.split(_tableSchema, \"[\");\n  const patt = new RegExp(\"]\");\n  preprocessData = _.filter(preprocessData, item => patt.test(item));\n  preprocessData = _.map(preprocessData, item => _.split(item, \"]\")[0]);\n\n  preprocessData = _.filter(preprocessData, o => {\n    return o !== \"\" && o !== \"\\n\";\n  });\n\n  return preprocessData;\n};\n\n// Set Seeting Config For Setting Comp Data\nexport const formateConfigParam = _data => {\n  const packageName = _.toLower(_data.packageName);\n  const projectName = _.upperFirst(_.camelCase(_data.projectName));\n  const tableName = _data.tableName;\n  let tableSchema = _data.tableSchema;\n\n  let map = new Map();\n\n  map.set(\"VAR\", \"String\");\n  map.set(\"DEC\", \"Double\");\n  map.set(\"INT\", \"Integer\");\n\n  const tableSchemaArray = formatTableSchemaToArray(tableSchema);\n\n  tableSchema = [];\n\n  for (let i = 0; i < tableSchemaArray.length; i += 2) {\n    let obj = {};\n    obj.columnName = tableSchemaArray[i];\n    obj.type = map.get(_.toUpper(tableSchemaArray[i + 1]).substring(0, 3));\n    obj.key = tableSchemaArray[i];\n\n    tableSchema.push(obj);\n  }\n\n  return { packageName, projectName, tableName, tableSchema };\n};\n","import React, { useState } from \"react\";\nimport AppContext from \"../config/Context\";\n\nimport { genGridColumn, formateConfigParam } from \"../util/generator\";\n\nconst AppContextProvider = props => {\n\n  const [tableSchema, setTableSchema] = useState([]); //table schema\n  const [formattedGridColumn, setFormattedGridColumn] = useState(\"\"); // formatted result of grid column\n\n  // Set Setting Config Form Setting Comp Data\n  const setSettingConfig = _data => { \n    const { tableSchema } = formateConfigParam(_data);\n    setTableSchema(tableSchema); \n  };\n\n  // Update Column Config For Config Table Comp\n  const updateConfig = _tableSchema => { \n    setTableSchema(_tableSchema);\n    const formattedGridColumn = genGridColumn({tableSchema});\n    setFormattedGridColumn(formattedGridColumn); \n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        tableSchema,\n        formattedGridColumn,\n        setSettingConfig,\n        updateConfig\n      }}\n    >\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContextProvider;\n","import React, { useContext } from \"react\";\n\nimport AppContext from \"../../config/Context\";\nimport { Form, Input, Button } from \"antd\"; \n\nimport \"./index.scss\";\n\nconst { TextArea } = Input;\n\nconst SettingArea = hocProps => { \n\n  //App context \n  const { setSettingConfig } = useContext(AppContext);\n\n\n  //HOC Form Props\n  const {\n    validateFields,\n    getFieldDecorator,\n    getFieldsError, \n  } = hocProps.form;\n\n\n  //Submit Function\n  const handleSubmit = e => {\n    e.preventDefault();\n    validateFields((err, values) => {\n      if (!err) {\n        setSettingConfig(values);\n      }\n    });\n  };\n\n\n  //check has error\n  const hasErrors = fieldsError => {\n    const hasError = Object.keys(fieldsError).some(field => fieldsError[field]);\n    return hasError;\n  };\n\n  return (\n    <div className=\"setting-area\">\n      <Form layout=\"vertical\" onSubmit={handleSubmit}>\n        {/* # Table Schema */}\n        <Form.Item label=\"# Table Schema\">\n          {getFieldDecorator(\"tableSchema\", {\n            rules: [\n              { required: true, message: \"Please input your Table Schema!\" }\n            ]\n          })(<TextArea rows={10} />)}\n        </Form.Item>\n\n        {/* Submit Button  */}\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={hasErrors(getFieldsError())}\n          >\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default Form.create()(SettingArea);\n","import React, { useContext } from \"react\";\n\nimport AppContext from '../../config/Context'\n\nimport { Table, Select, Checkbox   } from \"antd\";\nimport { Button } from 'antd';\n\nimport \"./index.scss\";\n \nconst Option = Select.Option;\n\n\nconst ConfigTable = () => {\n  //App context \n  const { tableSchema, updateConfig } = useContext(AppContext);\n\n\n  //handle change event\n  const handleChange = (_type, _index, _value) => {\n    // console.log(`type:${_type} index:${_index} value:${_value}`);\n \n\n    const config = {}\n  \n    switch(_type){\n      case \"sorter\":\n        config[_type] = _value.target.checked;\n        break;\n      default:\n        config[_type] = _value;\n    }\n\n    \n\n\n    tableSchema[_index] = {\n      ...tableSchema[_index],\n      ...config\n    };\n\n  }\n\n\n\n  const updateColumnConfig = () => { \n    updateConfig(tableSchema)\n  }\n\n\n\n  const columns = [\n      {\n        title: \"Column Name\",\n        dataIndex: \"columnName\",\n        key: \"columnName\"\n      },\n      {\n        title: \"Type\",\n        dataIndex: \"type\",\n        key: \"type\"\n      },\n      {\n        title: \"FilterType\",\n        key: \"FilterType\",\n        render: (text, record, index) => (\n          <Select defaultValue=\"none\" style={{ width: 120 }} onChange={handleChange.bind(this, 'filterType', index)}>\n            <Option  value=\"none\">none</Option>\n            <Option value=\"text\">text</Option>\n            <Option value=\"number\">number</Option> \n            <Option value=\"date\">date</Option>\n            <Option value=\"daterange\">daterange</Option>  \n            <Option value=\"dropdown\">dropdown</Option> \n          </Select>\n        )\n      },\n      {\n        title: \"Sorter\",\n        key: \"Sorter\",\n        render: (text, record, index) => (\n           <Checkbox onChange={handleChange.bind(this, 'sorter', index)}>sorter</Checkbox>\n        )\n      },\n      {\n        title: \"Render\",\n        key: \"Render\",\n        render: (text, record, index) => (\n          <Select defaultValue=\"none\" style={{ width: 120 }} onChange={handleChange.bind(this, 'render', index)}>\n            <Option value=\"none\">none</Option>\n            <Option value=\"span\">span</Option>\n            <Option value=\"moment\">moment</Option> \n            <Option value=\"toLocaleString\">toLocaleString</Option>\n            <Option value=\"Tooltip\">Tooltip</Option>   \n          </Select>\n        )\n      }\n    ];\n\n    return (\n      <div className=\"annotation-table\">\n        <h1 className=\"text-gradient\">@ Annotation</h1>\n        <Table columns={columns} dataSource={tableSchema} pagination={false} />\n        <Button type=\"primary\" onClick={updateColumnConfig}>Generate Grid Colunm</Button>\n      </div>\n    );\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n  \nexport default ConfigTable;\n","import React, { Component, useContext } from \"react\";\nimport AppContext from \"../../config/Context\";\n\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/nightOwl\";\n\nimport \"./index.less\";\n\n\n\nclass HighlightCodeComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const { codeStr, lang } = this.props;\n    return (\n      <Highlight {...defaultProps} theme={theme} code={codeStr} language={lang}>\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    );\n  }\n}\n\n\n\n\n\nconst HighlightCode = () => {\n  const { formattedGridColumn } = useContext(AppContext);\n\n  return (\n    <HighlightCodeComp codeStr={formattedGridColumn} lang=\"js\" />\n  );\n};\n\nexport default HighlightCode;\n","import React from \"react\";\nimport { Button } from \"antd\";\n\nimport AppContextProvider from \"./providers/ContextProvider\";\nimport AppContext from \"./config/Context\";\n\nimport SettingArea from \"./components/SettingArea/\";\nimport ConfigTable from \"./components/ConfigTable/\";\nimport HighlightCode from \"./components/HighlightCode/\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n    \n      {/* Github Button */}\n      <Button ghost icon=\"github\" className=\"githubBtn\">\n        <a href=\"https://github.com/openopen114/gen-grid-column-web\" target=\"_blank\">\n          {\" \"}\n          Github\n        </a>\n      </Button>\n\n      {/* Title */}\n      <h1 className=\"app-title\">GRID COLUMN GENERATOR</h1>\n\n      {/* App Context Provider */}\n      <AppContextProvider>\n        {/* Setting Area*/}\n        <SettingArea />\n\n        {/* Annotation Config Table*/}\n        <ConfigTable />\n\n        {/* Generate Result */}\n        <h1 className=\"result-title\">Generate Column Result</h1>\n        <HighlightCode />\n      </AppContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}