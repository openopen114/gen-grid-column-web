{"version":3,"sources":["components/HighlightCode/index.less","config/Context.js","util/generator.js","providers/ContextProvider.js","components/SettingArea/index.jsx","components/ConfigTable/index.jsx","components/HighlightCode/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppContext","React","createContext","prettier","require","plugins","ignoreColumnName","formateConfigParam","_data","_","packageName","projectName","tableName","tableSchema","map","Map","set","tableSchemaArray","_tableSchema","preprocessData","patt","RegExp","item","test","o","formatTableSchemaToArray","annotation","at_Id","at_Condition","at_GeneratedValue","at_CodingEntity","at_Reference","i","length","obj","columnName","type","get","trim","substring","key","Object","objectSpread","push","AppContextProvider","props","_useState","useState","_useState2","slicedToArray","setTableSchema","_useState3","_useState4","setProjectName","_useState5","_useState6","formattedGridColumn","setFormattedGridColumn","_useState7","_useState8","formattedFactoryComp","setFormattedFactoryComp","_useState9","_useState10","formattedColunmInitTmp","setFormattedColunmInitTmp","react_default","a","createElement","Context","Provider","value","setSettingConfig","_formateConfigParam","updateConfig","console","log","_state","result","includes","colName","filterType","sorter","render","concat","format","parser","genGridColumn","initVal","genColumnInitTmp","importComp","renderComp","renderType","renderCompItem","genFactoryComp","children","TextArea","Input","Form","create","hocProps","fieldsError","useContext","_hocProps$form","form","validateFields","getFieldDecorator","getFieldsError","className","es_form","layout","onSubmit","e","preventDefault","err","values","Item","label","rules","required","message","rows","input","placeholder","es_button","htmlType","disabled","keys","some","field","Option","Select","OptGroup","ConfigTable","_useContext","handleChange","_type","_index","_value","config","target","checked","columns","title","dataIndex","text","record","index","es_select","defaultValue","style","width","onChange","bind","es_checkbox","table","dataSource","pagination","onClick","HighlightCodeComp","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","codeStr","lang","es","assign","defaultProps","theme","code","language","_ref","tokens","getLineProps","getTokenProps","line","token","Component","HighlightCode","react","HighlightCode_HighlightCodeComp","App","ghost","icon","href","ContextProvider","src_components_SettingArea","src_components_ConfigTable","src_components_HighlightCode","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04ae4d34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.d41d8cd9.less\";","import React from \"react\";\nconst AppContext = React.createContext();\n\n\nexport default AppContext;","import * as _ from \"lodash\";\n\nconst prettier = require(\"prettier/standalone\");\nconst plugins = [require(\"prettier/parser-babylon\")];\n\n//ignore entity colunm\nexport const ignoreColumnName = [\n  \"CREATE_TIME\",\n  \"CREATE_USER\",\n  \"LAST_MODIFIED\",\n  \"LAST_MODIFY_USER\",\n  \"TS\",\n  \"DR\",\n  \"TENANT_ID\"\n];\n\nexport const genFactoryComp = _state => {\n    console.log('gen factory comp')\n    console.log(_state)\n  const { tableSchema, projectName } = _state;\n\n  let result = \"\";\n  let importComp = [];\n  let renderComp = []; \n \n console.log('tableSchema map')\n  tableSchema.map(item => {\n    if (!ignoreColumnName.includes(item.columnName)) {\n      const colName = _.camelCase(item.columnName);\n      const renderType = _.startsWith(item.render, \"FactoryComp-\")\n        ? _.split(item.render, \"FactoryComp-\")[1]\n        : \"none\";\n\n      console.log(item.render) \n      console.log(`renderType:${renderType}`)\n     let renderCompItem = \"\";\n\n      switch (renderType) {\n        case \"none\":\n          break;\n        case \"Text\":\n          importComp.push(`import TextField from 'components/RowField/TextField';`);\n\n          renderCompItem += `\n                                case '${colName}': \n                                  return (<div>\n                                      {record._edit ?//编辑态\n                                          <TextField {...this.props}\n                                              status={record['_status']}//是否修改过标记\n                                              validate={record['_validate']}//启用验证\n                                          /> : <div>{value}</div>}\n                                  </div>);\n                              `;\n          renderComp.push(renderCompItem);\n          console.log('renderComp i');\n          console.log(renderComp)\n          break;\n\n        case \"Select\":\n          importComp.push(`import SelectField from 'components/RowField/SelectField';`);\n          renderCompItem += `\n                                case '${colName}':\n                                  const ${colName}Data = [{\n                                      key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.${colName}.0001\", defaultMessage: '請選擇' }),\n                                      value: '',\n                                      disabled: true\n                                  }, {\n                                      key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.${colName}.0002\", defaultMessage: 'KEY-001' }),\n                                      value: 'VALUE-001'\n                                  }, {\n                                      key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.${colName}.0003\", defaultMessage: 'KEY-002' }),\n                                      value: 'VALUE-002'\n                                  }];\n                                  return (<div>\n                                      {record._edit ?\n                                          <SelectField {...this.props}\n                                              status={record['_status']}//是否修改过标记\n                                              validate={record['_validate']}//启用验证\n                                              data={${colName}Data}\n                                          /> : <div>{record.${colName}EnumValue}</div>}\n                                  </div>); \n                              `;\n          renderComp.push(renderCompItem);\n          console.log('renderComp i');\n          console.log(renderComp)\n          break;\n\n        case \"Number\":\n          importComp.push(`import NumberField from 'components/RowField/NumberField';`);\n          renderCompItem += `\n                                 case '${colName}': \n                                  return (<div>\n                                      {record._edit ?\n                                          <NumberField {...this.props}\n                                              status={record['_status']}//是否修改过标记\n                                              validate={record['_validate']}//启用验证\n                                              iconStyle=\"one\"\n                                              max={99}\n                                              min={0}\n                                              step={1}\n                                          /> : <div>{value}</div>}\n                                  </div>);\n                              `;\n          renderComp.push(renderCompItem);\n          console.log('renderComp i');\n          console.log(renderComp)\n          break;\n\n        case \"Month\":\n          importComp.push(`import SelectField from 'components/RowField/SelectField';`);\n          renderCompItem += `\n\n\n                case 'month'://月份\n                const monthData = [{\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0001\", defaultMessage: '请选择' }),\n                    value: \"\",\n                    disabled: true\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0002\", defaultMessage: '一月' }),\n                    value: 1\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0003\", defaultMessage: \"二月\" }),\n                    value: 2\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0004\", defaultMessage: \"三月\" }),\n                    value: 3\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0005\", defaultMessage: \"四月\" }),\n                    value: 4\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0006\", defaultMessage: \"五月\" }),\n                    value: 5\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0007\", defaultMessage: \"六月\" }),\n                    value: 6\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0008\", defaultMessage: \"七月\" }),\n                    value: 7\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0009\", defaultMessage: \"八月\" }),\n                    value: 8\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0010\", defaultMessage: \"九月\" }),\n                    value: 9\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0011\", defaultMessage: \"十月\" }),\n                    value: 10\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0012\", defaultMessage: \"十一月\" }),\n                    value: 11\n                }, {\n                    key: this.props.intl.formatMessage({ id: \"js.${projectName}.factory.month.0013\", defaultMessage: \"十二月\" }),\n                    value: 12\n                }];\n                return (<div>\n                    {record._edit ?\n                        <SelectField {...this.props}\n                            status={record['_status']}//是否修改过标记\n                            validate={record['_validate']}//启用验证\n                            data={monthData}//自定义数据传入json\n                        /> : <div>{record.monthEnumValue}</div>}\n                </div>);\n\n\n\n                     `;\n          renderComp.push(renderCompItem);\n          break;\n\n        case \"Year\":\n          importComp.push(`import YearField from 'components/RowField/YearField';`);\n          renderCompItem += `  \n             case 'year'://年份\n                return (<div>\n                    {record._edit ?\n                        <YearField {...this.props}\n                            status={record['_status']}//是否修改过标记\n                            validate={record['_validate']}//启用验证\n                        /> : <div>{value}</div>}\n                </div>);\n                              `;\n          renderComp.push(renderCompItem);\n          break;\n\n        case \"Date\":\n          importComp.push(`import DateField from 'components/RowField/DateField';`);\n          renderCompItem += `\n              case 'date'://日期\n                    return (<div>\n                        {record._edit ?\n                            <DateField {...this.props}\n                                status={record['_status']}//是否修改过标记\n                                validate={record['_validate']}//启用验证\n                            /> : <div>{value}</div>}\n                    </div>); \n                              `;\n          renderComp.push(renderCompItem);\n          break;\n\n        case \"Ref\":\n          importComp.push(`import Ref${_.upperFirst(colName)} from 'components/RowField/Ref${_.upperFirst(colName)}';`);\n          renderCompItem += `    \n           case '${colName}': \n                return (<div>\n                    {record._edit ?\n                        <Ref${_.upperFirst(colName)} {...this.props}\n                            status={record['_status']}//是否修改过标记\n                            validate={record['_validate']}//启用验证\n                        /> : <div>{record.${colName}Name}</div>}\n                </div>);\n                              `;\n          renderComp.push(renderCompItem);\n          break;\n\n        default:\n          break;\n      }\n    }\n  });\n\n console.log('tableSchema map end')\n\n  // Ouptut Result\n  result += `import React, { Component } from 'react';`;\n\n  \n  \n  importComp = _.uniq(importComp);\n  importComp.map(item => {\n    result += `\n        ${item}\n     `;\n  });\n\n  result += `\n     class FactoryComp extends Component {\n        constructor(props) {\n          super(props);\n        }\n\n\n        renderComp = () => {\n        let { type, value, record } = this.props;\n        switch (type) {  \n              \n   `;\n\n\n   console.log('renderComp o');\n          console.log(renderComp)\n\n  renderComp.map(item => {\n    result += `\n          ${item}\n      `;\n  });\n\n  result += `\n                   default:\n                      return (<div>组件类型错误</div>)\n              }\n          }\n          render() {\n              return (<div>\n                  {this.renderComp()}\n              </div>);\n          }\n      }\n\n      export default FactoryComp;\n\n  `;\n\n  const formattedFactoryComp = prettier.format(result, {\n    parser: \"babylon\",\n    plugins\n  });\n\n  return formattedFactoryComp;\n};\n\n\n\n\nexport const genGridColumn = _state => {\n  const { tableSchema, projectName } = _state;\n\n  let result = \"\";\n\n  result += `column = [`;\n\n  tableSchema.map(item => {\n    if (!ignoreColumnName.includes(item.columnName)) {\n      const colName = _.camelCase(item.columnName);\n      const filterType = item.filterType ? item.filterType : \"none\";\n      const sorter = item.sorter ? item.sorter : \"none\";\n      const render = item.render ? item.render : \"none\";\n\n      result += `\n           { \n               title: this.props.intl.formatMessage({ id:\"js.${projectName}.table.00XX\" ,defaultMessage:\"${colName}\" }),\n               dataIndex: \"${colName}\",\n               key: \"${colName}\",\n               width: 120,\n\n          `;\n\n      // filterType\n      switch (filterType) {\n        case \"none\":\n          break;\n        case \"text\":\n          result += `\n                filterType: \"text\",\n                filterDropdownType: \"string\",\n                filterDropdown: \"show\",\n              `;\n          break;\n        case \"number\":\n          result += `\n                filterType: \"number\", \n                filterDropdownType: \"number\", \n                className: 'column-number-right ', \n                filterInputNumberOptions: {\n                    max: 999999,\n                    min: 0,\n                    step: 1,\n                    precision: 0\n                },\n              `;\n          break;\n        case \"date\":\n          result += `\n                filterType: \"date\",\n                filterDropdown: \"show\", \n              `;\n          break;\n        case \"daterange\":\n          result += `\n                filterDropdown: \"hide\", \n                filterType: \"daterange\", \n                filterDropdownType: \"daterange\", \n              `;\n          break;\n        case \"dropdown\":\n          result += `\n                filterType: \"dropdown\",\n                filterDropdown: \"hide\",  \n                filterDropdownAuto: \"manual\", \n                filterDropdownData: [{key: \"KEY_1\", value: \"VALUE_1\"}, {key: \"KEY_2\", value: \"VALUE_2\"}],\n              `;\n          break;\n\n        default:\n          break;\n      }\n\n      // sorter\n      if (sorter !== \"none\") {\n        result += `\n                sorter: (a, b) => a.${colName} - b.${colName},\n            `;\n      }\n\n      // render\n      //Facroty Comp\n      if (_.startsWith(render, \"FactoryComp-\")) {\n        result += `\n          render: (text, record, index) => {\n                return <FactoryComp\n                    type='${colName}'  //业务组件类型\n                    value={text} //初始化值\n                    field='${colName}' //修改的字段\n                    index={index} //字段的行号\n                    required={true} //必输项\n                    record={record} //记录集用于多字段处理\n                    onChange={this.changeAllData} //回调函数\n                    onValidate={this.onValidate} //校验的回调\n                />\n            }\n        `;\n      }\n      switch (render) {\n        case \"none\":\n          break;\n        case \"Basic-span\":\n          result += `\n                render: (text, record, index) => {\n                    return <span>{text ? text : \"\"}</span>\n                }\n              `;\n          break;\n        case \"Basic-moment\":\n          result += `\n                render: (text, record, index) => {\n                      return <div>{text ? moment(text).format(\"YYYY/MM/DD\") : \"\"}</div>\n                }\n              `;\n          break;\n        case \"Basic-toLocaleString\":\n          result += `\n                render: (text, record, index) => {\n                      return  <span>{typeof text === \"number\" ? Number(text.toFixed(2)).toLocaleString() : \"\"}</span>;\n                }\n              `;\n          break;\n        case \"Basic-Tooltip\":\n          result += `\n                render: (text, record, index) => {\n                    return (\n                        <Tooltip inverse overlay={text}>\n                            <span>{text}</span>\n                        </Tooltip>\n                    );\n                }\n              `;\n          break;\n\n        default:\n          break;\n      }\n\n      result += `},`;\n    }\n  });\n\n\n  result += ` \n\n        \n        {\n            title: this.props.intl.formatMessage({ id:\"js.${projectName}.table.00XX\" ,defaultMessage:\"建立者\" }),\n            dataIndex: \"createUserName\",\n            key: \"createUserName\",\n            width: 200,\n            render: (text, record, index) => {\n              return <div>{text ? text : decodeURIComponent(getCookie(\"_A_P_userName\"))}</div>;\n            }\n        },\n        {\n            title: this.props.intl.formatMessage({ id:\"js.${projectName}.table.00XX\" ,defaultMessage:\"建立日期\" }),\n            dataIndex: \"createTime\",\n            key: \"createTime\",\n            width: 200,\n            render: (text, record, index) => { \n              return <div>{text ? moment(text,'YYYY-MM-DD HH:mm:ss').format('YYYY/MM/DD HH:mm') : moment().format(\"YYYY/MM/DD HH:mm\") }</div>;\n            }\n        },\n\n\n\n        {\n            title: this.props.intl.formatMessage({ id:\"js.${projectName}.table.00XX\" ,defaultMessage:\"修改者\" }),\n            dataIndex: \"lastModifyUserName\",\n            key: \"lastModifyUserName\",\n            width: 200,\n        },\n        {\n            title: this.props.intl.formatMessage({ id:\"js.${projectName}.table.00XX\" ,defaultMessage:\"修改日期\" }),\n            dataIndex: \"lastModified\",\n            key: \"lastModified\",\n            width: 200,\n            render: (text, record, index) => { \n              return <div>{text ? moment(text,'YYYY-MM-DD HH:mm:ss').format('YYYY/MM/DD HH:mm') : moment().format(\"YYYY/MM/DD HH:mm\") }</div>;\n            }\n        },\n\n`\n\n\n\n\n  result += `];`;\n\n  const formattedGridColumn = prettier.format(result, {\n    parser: \"babylon\",\n    plugins\n  });\n\n  return formattedGridColumn;\n};\n\n\n\n\n\n\nexport const genColumnInitTmp = _state => {\n  const { tableSchema } = _state;\n\n  let result = \"\";\n\n  result += `\n            let tmp = {\n              key: uuid(),\n              _edit: true,\n              _isNew: true,\n              _checked: false,\n              _disabled: false,\n              _flag: false,\n            `;\n\n\n    let map = new Map();\n\n    map.set(\"String\", `''`);\n    map.set(\"Double\", 0.0);\n    map.set(\"Integer\", 0);           \n\n  tableSchema.map(item => {\n    if (!ignoreColumnName.includes(item.columnName)) {\n      const colName = _.camelCase(item.columnName);\n      const type = item.type;\n      const initVal = map.get(type);\n\n  \n      if(colName == 'year'){\n          result += `year: moment().format('YYYY'),`;\n      }else{\n          result += ` ${colName}:${initVal}, `;\n\n      }\n    }\n  })\n\n \n\n  result += `}`;\n\n  const formattedColunmInitTmp = prettier.format(result, {\n    parser: \"babylon\",\n    plugins\n  });\n\n  return formattedColunmInitTmp;\n};\n\n\n\n\n\n\n\n\nexport const formatTableSchemaToArray = _tableSchema => {\n  let preprocessData = _.split(_tableSchema, \"[\");\n  const patt = new RegExp(\"]\");\n  preprocessData = _.filter(preprocessData, item => patt.test(item));\n  preprocessData = _.map(preprocessData, item => _.split(item, \"]\")[0]);\n\n  preprocessData = _.filter(preprocessData, o => {\n    return o !== \"\" && o !== \"\\n\";\n  });\n\n  return preprocessData;\n};\n\n\n\n// Set Seeting Config For Setting Comp Data\nexport const formateConfigParam = _data => {\n  const packageName = _.toLower(_data.packageName);\n  const projectName = _data.projectName;\n  let tableName = _data.tableName;\n\n\n  tableName = _.replace(tableName, '[', '');\n  tableName = _.replace(tableName, ']', '');\n\n\n  let tableSchema = _data.tableSchema;\n\n  let map = new Map();\n\n  map.set(\"VAR\", \"String\");//VARCHAR\n  map.set(\"DEC\", \"Double\");//DECIMAL\n  map.set(\"INT\", \"Integer\");//INT\n  map.set(\"NVA\", \"String\");//NVARCHAR\n  map.set(\"CHA\", \"String\");//CHAR\n  map.set(\"BIT\", \"Boolean\"); //BIT\n \n\n  const tableSchemaArray = formatTableSchemaToArray(tableSchema);\n\n  tableSchema = [];\n  const annotation = {\n    at_Id: false,\n    at_Condition: false,\n    at_GeneratedValue: false,\n    at_CodingEntity:false,\n    at_Reference:false\n  };\n\n  for (let i = 0; i < tableSchemaArray.length; i += 2) {\n    let obj = {};\n    obj.columnName = tableSchemaArray[i];\n    obj.type = map.get(_.replace(tableSchemaArray[i + 1], 'TYPE_', '').trim().substring(0, 3)) ? map.get(_.replace(tableSchemaArray[i + 1], 'TYPE_', '').trim().substring(0, 3)) : 'String';\n    obj.key = tableSchemaArray[i];\n\n    obj = {\n      ...obj,\n      ...annotation\n    };\n\n    tableSchema.push(obj);\n  }\n\n  return {projectName, tableSchema };\n};\n","import React, { useState } from \"react\";\nimport AppContext from \"../config/Context\";\n\nimport { genGridColumn, genFactoryComp, formateConfigParam, genColumnInitTmp } from \"../util/generator\";\n\nconst AppContextProvider = props => {\n\n  const [tableSchema, setTableSchema] = useState([]); //table schema\n  const [projectName, setProjectName] = useState([]); //project name\n  const [formattedGridColumn, setFormattedGridColumn] = useState(\"\"); // formatted result of grid column\n  const [formattedFactoryComp, setFormattedFactoryComp] = useState(\"\"); // formatted result of Factory Comp\n  const [formattedColunmInitTmp, setFormattedColunmInitTmp] = useState(\"\"); //formatted handle new column init tmp\n  // Set Setting Config Form Setting Comp Data\n  const setSettingConfig = _data => { \n    const { tableSchema, projectName } = formateConfigParam(_data);\n    setTableSchema(tableSchema); \n    setProjectName(projectName);\n  };\n\n  // Update Column Config For Config Table Comp\n  const updateConfig = _tableSchema => { \n    console.log('updateConfig')\n    console.log(_tableSchema)\n    console.log(projectName)\n    setTableSchema(_tableSchema);\n    const formattedGridColumn = genGridColumn({tableSchema});\n    setFormattedGridColumn(formattedGridColumn); \n\n    const formattedColunmInitTmp = genColumnInitTmp({tableSchema});\n    setFormattedColunmInitTmp(formattedColunmInitTmp);\n\n\n    const formattedFactoryComp = genFactoryComp({tableSchema, projectName});\n    setFormattedFactoryComp(formattedFactoryComp)\n\n    \n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        tableSchema,\n        formattedGridColumn,\n        formattedFactoryComp,\n        formattedColunmInitTmp,\n        setSettingConfig,\n        updateConfig\n      }}\n    >\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContextProvider;\n","import React, { useContext } from \"react\";\n\nimport AppContext from \"../../config/Context\";\nimport { Form, Input, Button } from \"antd\"; \n\nimport \"./index.scss\";\n\nconst { TextArea } = Input;\n\nconst SettingArea = hocProps => { \n\n  //App context \n  const { setSettingConfig } = useContext(AppContext);\n\n\n  //HOC Form Props\n  const {\n    validateFields,\n    getFieldDecorator,\n    getFieldsError, \n  } = hocProps.form;\n\n\n  //Submit Function\n  const handleSubmit = e => {\n    e.preventDefault();\n    validateFields((err, values) => {\n      if (!err) {\n        console.log('submit value')\n        console.log(values);\n        setSettingConfig(values);\n      }\n    });\n  };\n\n\n  //check has error\n  const hasErrors = fieldsError => {\n    const hasError = Object.keys(fieldsError).some(field => fieldsError[field]);\n    return hasError;\n  };\n\n  return (\n    <div className=\"setting-area\">\n      <Form layout=\"vertical\" onSubmit={handleSubmit}>\n        {/* # Table Schema */}\n        <Form.Item label=\"# Table Schema\">\n          {getFieldDecorator(\"tableSchema\", {\n            // initialValue:`\n            //    [CREATE_TIME]    [VARCHAR]  \n            //    [CREATE_USER]    [VARCHAR]  \n            //    [LAST_MODIFIED]    [VARCHAR]  \n            //    [LAST_MODIFY_USER]    [VARCHAR] \n            //    [BPM_STATE]    [DECIMAL]  \n            //    [TS]    [VARCHAR] \n            //    [DR]    [DECIMAL]  \n            //    [TENANT_ID]    [VARCHAR]  \n            //    [ID]    [CHAR]  \n            //    [CODE]    [VARCHAR]  \n            //    [DESCRIPTION]    [NVARCHAR]  \n            //    [BUCKET_NO]    [INT]  \n            // `,\n            rules: [\n              { required: true, message: \"Please input your Table Schema!\" }\n            ]\n          })(<TextArea rows={10} />)}\n        </Form.Item>\n\n        {/* # Project Name */}\n        <Form.Item label=\"# Project Name\">\n          {getFieldDecorator(\"projectName\", {\n            rules: [\n              { required: true, message: \"Please input your Project Name!\" }\n            ]\n          })(<Input placeholder=\"project name\" />)}\n        </Form.Item>\n\n\n\n        {/* Submit Button  */}\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={hasErrors(getFieldsError())}\n          >\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default Form.create()(SettingArea);\n","import React, { useContext } from \"react\";\n\nimport AppContext from '../../config/Context'\n\nimport { Table, Select, Checkbox   } from \"antd\";\nimport { Button } from 'antd';\n\nimport \"./index.scss\";\n \nconst {Option, OptGroup} = Select;\n\n\nconst ConfigTable = () => {\n  //App context \n  const { tableSchema, updateConfig } = useContext(AppContext);\n\n\n  //handle change event\n  const handleChange = (_type, _index, _value) => {\n    console.log(`type:${_type} index:${_index} value:${_value}`);\n \n\n    const config = {}\n  \n    switch(_type){\n      case \"sorter\":\n        config[_type] = _value.target.checked;\n        break;\n      default:\n        config[_type] = _value;\n    }\n\n    \n\n\n    tableSchema[_index] = {\n      ...tableSchema[_index],\n      ...config\n    };\n\n  }\n\n\n\n  const updateColumnConfig = () => { \n    updateConfig(tableSchema)\n  }\n\n\n\n  const columns = [\n      {\n        title: \"Column Name\",\n        dataIndex: \"columnName\",\n        key: \"columnName\"\n      },\n      {\n        title: \"Type\",\n        dataIndex: \"type\",\n        key: \"type\"\n      },\n      {\n        title: \"FilterType\",\n        key: \"FilterType\",\n        render: (text, record, index) => (\n          <Select defaultValue=\"none\" style={{ width: 120 }} onChange={handleChange.bind(this, 'filterType', index)}>\n            <Option  value=\"none\">none</Option>\n            <Option value=\"text\">text</Option>\n            <Option value=\"number\">number</Option> \n            <Option value=\"date\">date</Option>\n            <Option value=\"daterange\">daterange</Option>  \n            <Option value=\"dropdown\">dropdown</Option> \n          </Select>\n        )\n      },\n      {\n        title: \"Sorter\",\n        key: \"Sorter\",\n        render: (text, record, index) => (\n           <Checkbox onChange={handleChange.bind(this, 'sorter', index)}>sorter</Checkbox>\n        )\n      },\n      {\n        title: \"Render\",\n        key: \"Render\",\n        render: (text, record, index) => (\n          <Select defaultValue=\"none\" style={{ width: 120 }} onChange={handleChange.bind(this, 'render', index)}>\n               \n\n\n            <OptGroup label=\"Basic\">\n              <Option value=\"none\">none</Option>\n              <Option value=\"Basic-span\">span</Option>\n              <Option value=\"Basic-moment\">moment</Option> \n              <Option value=\"Basic-toLocaleString\">toLocaleString</Option>\n              <Option value=\"Basic-Tooltip\">Tooltip</Option>\n            </OptGroup>\n            <OptGroup label=\"FactoryComp\">\n              <Option value=\"FactoryComp-Text\">Text</Option>\n              <Option value=\"FactoryComp-Select\">Select</Option>\n              <Option value=\"FactoryComp-Number\">Number</Option>\n              <Option value=\"FactoryComp-Month\">Month</Option>\n              <Option value=\"FactoryComp-Year\">Year</Option>\n              <Option value=\"FactoryComp-Date\">Date</Option>\n              <Option value=\"FactoryComp-Ref\">Ref</Option>\n            </OptGroup>\n  \n\n\n          </Select>\n        )\n      }\n    ];\n\n    return (\n      <div className=\"annotation-table\">\n        <h1 className=\"text-gradient\">@ Annotation</h1>\n        <Table columns={columns} dataSource={tableSchema} pagination={false} />\n        <Button type=\"primary\" onClick={updateColumnConfig}>Generate Grid Colunm</Button>\n      </div>\n    );\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n  \nexport default ConfigTable;\n","import React, { Component, useContext ,Fragment } from \"react\";\nimport AppContext from \"../../config/Context\";\n\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/nightOwl\";\n\nimport \"./index.less\";\n\n\n\nconst HighlightCode = () => {\n  const { formattedGridColumn, formattedFactoryComp, formattedColunmInitTmp } = useContext(AppContext);\n\n  return (\n    <Fragment>\n      <HighlightCodeComp codeStr={formattedGridColumn} lang=\"js\" />\n      <HighlightCodeComp codeStr={formattedColunmInitTmp} lang=\"jsx\" />\n      <HighlightCodeComp codeStr={formattedFactoryComp} lang=\"js\" />\n    </Fragment>\n    \n  );\n};\n\n\n\nclass HighlightCodeComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const { codeStr, lang } = this.props;\n    return (\n      <Highlight {...defaultProps} theme={theme} code={codeStr} language={lang}>\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    );\n  }\n}\n\n\n\n\n\nexport default HighlightCode;\n","import React from \"react\";\nimport { Button } from \"antd\";\n\nimport AppContextProvider from \"./providers/ContextProvider\";\nimport AppContext from \"./config/Context\";\n\nimport SettingArea from \"./components/SettingArea/\";\nimport ConfigTable from \"./components/ConfigTable/\";\nimport HighlightCode from \"./components/HighlightCode/\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n    \n      {/* Github Button */}\n      <Button ghost icon=\"github\" className=\"githubBtn\">\n        <a href=\"https://github.com/openopen114/gen-grid-column-web\" target=\"_blank\">\n          {\" \"}\n          Github\n        </a>\n      </Button>\n\n      {/* Title */}\n      <h1 className=\"app-title\">GRID COLUMN GENERATOR</h1>\n\n      {/* App Context Provider */}\n      <AppContextProvider>\n        {/* Setting Area*/}\n        <SettingArea />\n\n        {/* Annotation Config Table*/}\n        <ConfigTable />\n\n        {/* Generate Result */}\n        <h1 className=\"result-title\">Generate Column Result</h1>\n        <HighlightCode />\n      </AppContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}